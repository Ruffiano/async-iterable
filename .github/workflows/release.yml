name: Release package

on:
  push:
    branches: [ main ]

jobs:
  quality:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        node-version: [16.x, 17.x, 18.x]
        os: [ubuntu-latest, windows-latest, macos-12]
        # See supported Node.js release schedule at https://nodejs.org/en/about/releases/

    steps:
    - uses: actions/checkout@v3
    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v3
      with:
        node-version: ${{ matrix.node-version }}
        registry-url: https://npm.pkg.github.com/
        scope: '@ruffiano'
    - run: npm install
    - run: npm test
  
  publish:
    runs-on: ubuntu-latest
    if: ${{ github.ref == 'refs/heads/main' }}
    needs: [quality]
    permissions:
      packages: write
      contents: read
    steps:
    - uses: actions/checkout@v3
    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v3
      with:
        node-version: ${{ matrix.node-version }}
        registry-url: https://npm.pkg.github.com/
        scope: '@ruffiano'
    - run: npm install
    - run: npm run build
    - name: Check package version
      id: version-check
      run: |
        CURRENT_VERSION=$(node -p "require('./package.json').version")
        LAST_VERSION=$(npm show @ruffiano/async-iterable version 2>/dev/null || echo "null")
        echo "::set-output name=current_version::$CURRENT_VERSION"
        echo "::set-output name=last_version::$LAST_VERSION"
    - name: Check if package version is higher
      id: version-comparison
      run: |
        CURRENT_VERSION=${{ steps.version-check.outputs.current_version }}
        LAST_VERSION=${{ steps.version-check.outputs.last_version }}
        if [[ "$LAST_VERSION" == "null" || "$CURRENT_VERSION" != $(echo -e "$CURRENT_VERSION\n$LAST_VERSION" | sort -V | tail -n1) ]]; then
          echo "::set-output name=version_higher::true"
        else
          echo "::set-output name=version_higher::false"
    - name: Publish package
      run: |
        VERSION_HIGHER=${{ steps.version-comparison.outputs.version_higher }}
        LAST_VERSION=${{ steps.version-check.outputs.last_version }}
        if [[ "$VERSION_HIGHER" == "true" && LAST_VERSION != "null"]]; then
          npm publish
        else
          echo "Package version is not higher. Publishing is rejected."
      env:
        NODE_AUTH_TOKEN: ${{ secrets.GITHUB_TOKEN }}